установка гита
скачатть файл, установка с дефолтными настройками, в конце второй радио чтобы использовать консоль винды
в консоле винды прописать адрес почты для получения уведомлений о коммитах
git config --global user.name "Marina Nosova"
git config --global user.email "nosova_marino4ka@mail.ru"
git config
git config --list (настройки проекта в том числе)
git help команда (открвывает мануал с описанием команды)
git commit --help (открвывает мануал с описанием команды)


Настройки в шторме
чтобы подсветить файлы и отобразить оно changes
file>settings>version control>unregistred roots(select and add(+))
check-show directoties with changes descendants
настройка консоли
tools>terminal
sell path "C:\Program Files\Git\bin\sh.exe" -login -i
all checked


команды гита
git init (создаем инспектирование)
регистрируем папку (см. настройки в шторме)
git status (узнаем статус, то есть различия между базой гита и локальными файлами)
-о новых неотслеживаемых файлах
-об изменениях нуждающихся в комите
-о готовности загрузки в репозиторий
git add . (заносим в базу данных изменения тех файлов, которые отличаются от базы гита,
 то есть последние измененные. если файлы новые, то они все отличаются от базы данных.т.к база пуста)
git commit -m "comment" (записываем в историю изменение(те что были от последнего git add,
 без этой команды или изменения после этой команды затруться). делаем слепок, точку возможного отката.
 комментируем чтобы не зупатуться)
git pull origin master (скачать последние изменения)
 git push origin master (залить свои изменения)
git checkout имя ()o


1) заливаем на удаленный сервис
создаем папку проекта на сервисе-новый рипозиторий
подключили
git remote add origin https://github.com/mnosova/preprocessors.git
залили
git push -u origin master
2) клонируем с удаленного сервиса
git clone https://github.com/mnosova/preprocessors.git
(сохраняем пароль, без последующего ввода)
git branch имя (создать ветку)
git checkout имя (переключится на ветку для работы в ней
или для того чтобы она поглатила другую ветку)
git branch (узнать на какой ты ветке. в какой ветке ты, та и поглотит другую ветку)
git log --graph --all --decorate (история комитов, изменений в графике)
git log --graph --all --decorate --oneline (в одну строку)
git merge имя ()
конфликт до ==ветка основная
после === в ветке имя
стереть данные о конфликте
